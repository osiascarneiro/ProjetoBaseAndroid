apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "br.com.baseproject"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "SERVER_URL", '"https://jsonplaceholder.typicode.com/"'
    }
    dataBinding {
        enabled = true
    }
    buildTypes {
        debug {
            testCoverageEnabled = true
        }

        homolog {
            initWith debug
            buildConfigField "String", "SERVER_URL", '"http://<servidor de homologacao>/<Sua base URL>/"'
            testCoverageEnabled = false
        }

        release {
            buildConfigField "String", "SERVER_URL", '"http://<servidor de producao>/<Sua base URL>/"'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled = false
        }
    }
}

jacoco {
    toolVersion = "$jacoco_version"
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec']))
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayout_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.cardview:cardview:$cardview_version"
    //Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    //Rx
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "com.jakewharton.rxbinding2:rxbinding-kotlin:$rxbinding_version"
    //Dagger
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    //Picasso
    implementation "com.squareup.picasso:picasso:$picasso_version"
    //Testes
    testImplementation 'junit:junit:4.12'
    testImplementation "com.google.truth:truth:0.42"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockito_version"
    testImplementation "io.mockk:mockk:$mockk_version"
    androidTestImplementation "androidx.test.ext:junit:$testrunner_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test:runner:$testrunner_version"
    androidTestImplementation "androidx.test:rules:$testrunner_version"
    testImplementation "androidx.arch.core:core-testing:$lifecycle_version"
    androidTestImplementation "androidx.test.ext:truth:$testrunner_version"
}
